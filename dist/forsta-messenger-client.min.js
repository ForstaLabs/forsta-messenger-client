!function(){"use strict";const e=self.ifrpc=self.ifrpc||{},s=2,t="*",i="ifrpc-magic-494581011";let r=0;e.RemoteError=class e extends Error{static serialize(e){return Object.assign({name:e.name,message:e.message,stack:e.stack},JSON.parse(JSON.stringify(e)))}static deserialize(e){const s=new this(`Remote error: <${e.name}: ${e.message}>`);return s.remoteError=e,s}};class n{constructor(e,r){r=r||{},this.peerFrame=e,this.magic=r.magic||i,this.peerOrigin=r.peerOrigin||t,this.commands=new Map,this.listeners=new Map,this.activeCommandRequests=new Map,self.addEventListener("message",async e=>{if(e.source!==this.peerFrame)return;if("*"!==this.peerOrigin&&e.origin!==this.peerOrigin)return void console.warn("Message from untrusted origin:",e.origin);const t=e.data;if(t&&t.magic===this.magic)if(t.version===s)if("command"===t.op)if("request"===t.dir)await this.handleCommandRequest(e);else{if("response"!==t.dir)throw new Error("Command Direction Missing");await this.handleCommandResponse(e)}else{
if("event"!==t.op)throw new Error("Invalid ifrpc Operation");await this.handleEvent(e)}else console.error(`Version mismatch: expected ${s} but got ${t.version}`);else console.error("Invalid ifrpc magic")}),this.addCommandHandler("ifrpc-get-commands",()=>Array.from(this.commands.keys())),this.addCommandHandler("ifrpc-get-listeners",()=>Array.from(this.listeners.keys()))}addCommandHandler(e,s){if(this.commands.has(e))throw new Error("Command handler already added: "+e);this.commands.set(e,s)}removeCommandHandler(e){this.commands.delete(e)}addEventListener(e,s){this.listeners.has(e)||this.listeners.set(e,[]),this.listeners.get(e).push(s)}removeEventListener(e,s){const t=this.listeners.get(e).fitler(e=>e!==s);this.listeners.set(e,t)}triggerEvent(e){const s=Array.from(arguments).slice(1);this.sendMessage({op:"event",name:e,args:s})}async invokeCommand(e){const s=Array.from(arguments).slice(1),t=`${Date.now()}-${r++}`,i=new Promise((e,s)=>{this.activeCommandRequests.set(t,{resolve:e,reject:s
})});return this.sendMessage({op:"command",dir:"request",name:e,id:t,args:s}),await i}sendMessage(e){const t=Object.assign({magic:this.magic,version:s},e);this.peerFrame.postMessage(t,this.peerOrigin)}sendCommandResponse(e,s,t){this.sendMessage({op:"command",dir:"response",name:e.data.name,id:e.data.id,success:s,response:t})}async handleCommandRequest(s){const t=this.commands.get(s.data.name);if(!t){const t=new ReferenceError("Invalid Command: "+s.data.name);throw this.sendCommandResponse(s,!1,e.RemoteError.serialize(t)),t}try{this.sendCommandResponse(s,!0,await t.apply(s,s.data.args))}catch(t){this.sendCommandResponse(s,!1,e.RemoteError.serialize(t))}}async handleCommandResponse(s){const t=this.activeCommandRequests.get(s.data.id);if(!t)throw new Error("Invalid request ID");this.activeCommandRequests.delete(s.data.id),s.data.success?t.resolve(s.data.response):t.reject(e.RemoteError.deserialize(s.data.response))}async handleEvent(e){const s=this.listeners.get(e.data.name)
;if(s&&s.length)for(const t of s)try{await t.apply(e,e.data.args)}catch(e){console.error("ifrpc event listener error:",t,e)}else console.debug("ifrpc event triggered without listeners:",e.data.name)}}e.init=((e,s)=>new n(e,s))}(),self.forsta=self.forsta||{},forsta.messenger=forsta.messenger||{},function(){"use strict";forsta.messenger.Client=class e{constructor(e,s,t){if(!(e instanceof Element))throw new TypeError("el argument must be an Element");if(!s)throw new TypeError("auth argument missing");this.auth=s,this.options=t||{},this.onInit=this.options.onInit,this.onLoaded=this.options.onLoaded,this._iframe=document.createElement("iframe"),this._iframe.style.border="none",this._iframe.style.width="100%",this._iframe.style.height="100%",this._iframe.setAttribute("allow","camera; microphone; fullscreen; autoplay; display-capture; geolocation; speaker; vibrate;"),this._iframe.setAttribute("allowfullscreen","true"),this._iframe.addEventListener("load",()=>{
this._rpc=ifrpc.init(this._iframe.contentWindow),this._rpc.addEventListener("init",this._onClientInit.bind(this)),this.onLoaded&&this._rpc.addEventListener("loaded",()=>this.onLoaded(this))});const i=this.options.url||"https://app.forsta.io/@";this._iframe.setAttribute("src",`${i}?managed`),e.appendChild(this._iframe)}async _onClientInit(){if(await this._rpc.invokeCommand("configure",{auth:this.auth,showNav:!!this.options.showNav,showHeader:!!this.options.showHeader,showThreadAside:!!this.options.showThreadAside,showThreadHeader:!!this.options.showThreadHeader,ephemeralUser:this.options.ephemeralUserInfo}),this._rpcEarlyEvents){for(const e of this._rpcEarlyEvents)this._rpc.addEventListener(e.event,e.callback);delete this._rpcEarlyEvents}this.onInit&&await this.onInit(this)}addEventListener(e,s){this._rpc?this._rpc.addEventListener(e,s):(this._rpcEarlyEvents||(this._rpcEarlyEvents=[]),this._rpcEarlyEvents.push({event:e,callback:s}))}removeEventListener(e,s){
this._rpc?this._rpc.removeEventListener(e,s):this._rpcEarlyEvents=this._rpcEarlyEvents.filter(t=>!(t.event===e&&t.callback===s))}async navPanelToggle(e){return await this._rpc.invokeCommand("nav-panel-toggle",e)}async threadStartWithExpression(e){return await this._rpc.invokeCommand("thread-join",e)}async threadOpen(e){return await this._rpc.invokeCommand("thread-open",e)}}}();