!function(){"use strict";const e=self.ifrpc=self.ifrpc||{},t=2,s="*",i="ifrpc-magic-494581011";let r=0;e.RemoteError=class e extends Error{static serialize(e){return Object.assign({name:e.name,message:e.message,stack:e.stack},JSON.parse(JSON.stringify(e)))}static deserialize(e){const t=new this(`Remote error: <${e.name}: ${e.message}>`);return t.remoteError=e,t}};class a{constructor(e,r){r=r||{},this.peerFrame=e,this.magic=r.magic||i,this.peerOrigin=r.peerOrigin||s,this.commands=new Map,this.listeners=new Map,this.activeCommandRequests=new Map,self.addEventListener("message",async e=>{if(e.source!==this.peerFrame)return;if("*"!==this.peerOrigin&&e.origin!==this.peerOrigin)return void console.warn("Message from untrusted origin:",e.origin);const s=e.data;if(s&&s.magic===this.magic)if(s.version===t)if("command"===s.op)if("request"===s.dir)await this.handleCommandRequest(e);else{if("response"!==s.dir)throw new Error("Command Direction Missing");await this.handleCommandResponse(e)}else{
if("event"!==s.op)throw new Error("Invalid ifrpc Operation");await this.handleEvent(e)}else console.error(`Version mismatch: expected ${t} but got ${s.version}`);else console.error("Invalid ifrpc magic")}),this.addCommandHandler("ifrpc-get-commands",()=>Array.from(this.commands.keys())),this.addCommandHandler("ifrpc-get-listeners",()=>Array.from(this.listeners.keys()))}addCommandHandler(e,t){if(this.commands.has(e))throw new Error("Command handler already added: "+e);this.commands.set(e,t)}removeCommandHandler(e){this.commands.delete(e)}addEventListener(e,t){this.listeners.has(e)||this.listeners.set(e,[]),this.listeners.get(e).push(t)}removeEventListener(e,t){const s=this.listeners.get(e).fitler(e=>e!==t);this.listeners.set(e,s)}triggerEvent(e){const t=Array.from(arguments).slice(1);this.sendMessage({op:"event",name:e,args:t})}async invokeCommand(e){const t=Array.from(arguments).slice(1),s=`${Date.now()}-${r++}`,i=new Promise((e,t)=>{this.activeCommandRequests.set(s,{resolve:e,reject:t
})});return this.sendMessage({op:"command",dir:"request",name:e,id:s,args:t}),await i}sendMessage(e){const s=Object.assign({magic:this.magic,version:t},e);this.peerFrame.postMessage(s,this.peerOrigin)}sendCommandResponse(e,t,s){this.sendMessage({op:"command",dir:"response",name:e.data.name,id:e.data.id,success:t,response:s})}async handleCommandRequest(t){const s=this.commands.get(t.data.name);if(!s){const s=new ReferenceError("Invalid Command: "+t.data.name);throw this.sendCommandResponse(t,!1,e.RemoteError.serialize(s)),s}try{this.sendCommandResponse(t,!0,await s.apply(t,t.data.args))}catch(s){this.sendCommandResponse(t,!1,e.RemoteError.serialize(s))}}async handleCommandResponse(t){const s=this.activeCommandRequests.get(t.data.id);if(!s)throw new Error("Invalid request ID");this.activeCommandRequests.delete(t.data.id),t.data.success?s.resolve(t.data.response):s.reject(e.RemoteError.deserialize(t.data.response))}async handleEvent(e){const t=this.listeners.get(e.data.name)
;if(t&&t.length)for(const s of t)try{await s.apply(e,e.data.args)}catch(e){console.error("ifrpc event listener error:",s,e)}else console.debug("ifrpc event triggered without listeners:",e.data.name)}}e.init=((e,t)=>new a(e,t))}(),self.forsta=self.forsta||{},forsta.messenger=forsta.messenger||{},function(){"use strict";forsta.messenger.Client=class e{constructor(e,t,s){if(!(e instanceof Element))throw new TypeError("el argument must be an Element");if(!t)throw new TypeError("auth argument missing");this.auth=t,this.options=s||{},this.onInit=this.options.onInit,this.onLoaded=this.options.onLoaded,this._iframe=document.createElement("iframe"),this._iframe.style.border="none",this._iframe.style.width="100%",this._iframe.style.height="100%",this._iframe.setAttribute("allow","camera; microphone; fullscreen; autoplay; display-capture; geolocation; speaker; vibrate;"),this._iframe.setAttribute("allowfullscreen","true"),this._iframe.addEventListener("load",()=>{
this._rpc=ifrpc.init(this._iframe.contentWindow),this._rpc.addEventListener("init",this._onClientInit.bind(this)),this.onLoaded&&this._rpc.addEventListener("loaded",()=>this.onLoaded(this))});const i=this.options.url||"https://app.forsta.io/@";this._iframe.setAttribute("src",`${i}?managed`),e.appendChild(this._iframe)}async _onClientInit(){if(await this._rpc.invokeCommand("configure",{auth:this.auth,showNav:!!this.options.showNav,showHeader:!!this.options.showHeader,showThreadAside:!!this.options.showThreadAside,showThreadHeader:!!this.options.showThreadHeader,ephemeralUser:this.options.ephemeralUserInfo}),this._rpcEarlyEvents){for(const e of this._rpcEarlyEvents)this._rpc.addEventListener(e.event,e.callback);delete this._rpcEarlyEvents}this.onInit&&await this.onInit(this)}addEventListener(e,t){this._rpc?this._rpc.addEventListener(e,t):(this._rpcEarlyEvents||(this._rpcEarlyEvents=[]),this._rpcEarlyEvents.push({event:e,callback:t}))}removeEventListener(e,t){
this._rpc?this._rpc.removeEventListener(e,t):this._rpcEarlyEvents=this._rpcEarlyEvents.filter(s=>!(s.event===e&&s.callback===t))}async navPanelToggle(e){await this._rpc.invokeCommand("nav-panel-toggle",e)}async threadStartWithExpression(e){return await this._rpc.invokeCommand("thread-join",e)}async threadOpen(e){await this._rpc.invokeCommand("thread-open",e)}async threadSetExpiration(e,t){await this._rpc.invokeCommand("thread-set-expiration",e,t)}async threadList(){return await this._rpc.invokeCommand("thread-list")}async threadListAttributes(e){return await this._rpc.invokeCommand("thread-list-attributes",e)}async threadGetAttribute(e,t){return await this._rpc.invokeCommand("thread-get-attribute",e,t)}async threadSetAttribute(e,t,s){return await this._rpc.invokeCommand("thread-set-attribute",e,t,s)}}}();