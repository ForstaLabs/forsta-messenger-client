!function(){"use strict";const e=self.ifrpc=self.ifrpc||{},t=3,r="*",n="ifrpc-magic-494581011";let s=0;e.RemoteError=class e extends Error{static serialize(e){return Object.assign({name:e.name,message:e.message,stack:e.stack},JSON.parse(JSON.stringify(e)))}static deserialize(e){const t=new this(`Remote error: <${e.name}: ${e.message}>`);return t.remoteError=e,t}};class o{constructor(e,t){t=t||{},this.peerFrame=e,this.magic=t.magic||n,this.peerOrigin=t.peerOrigin||r,this.acceptOpener=!!t.acceptOpener,this.acceptParent=!!t.acceptParent,this.commands=new Map,this.listeners=new Map,this.activeCommandRequests=new Map,this.constructor.registerMessageHandler(this),this.addCommandHandler("ifrpc-get-commands",()=>Array.from(this.commands.keys())),this.addCommandHandler("ifrpc-get-listeners",()=>Array.from(this.listeners.keys()))}static registerMessageHandler(e){this._registered||(self.addEventListener("message",this.onMessage.bind(this)),this._registered=[]),this._registered.push(e)}
static async onMessage(e){if(e.source)for(const r of this._registered){if("*"!==r.peerOrigin&&e.origin!==r.peerOrigin)continue;const n=new Set([e.source]);if(r.acceptOpener&&e.source.opener&&n.add(e.source.opener),r.acceptParent&&e.source.parent&&n.add(e.source.parent),!n.has(r.peerFrame))continue;const s=e.data;if(s&&s.magic===r.magic)if(s.version===t)if("command"===s.op)if("request"===s.dir)await r.handleCommandRequest(e);else{if("response"!==s.dir)throw new Error("Command Direction Missing");await r.handleCommandResponse(e)}else{if("event"!==s.op)throw new Error("Invalid ifrpc Operation");await r.handleEvent(e)}else console.error(`Version mismatch: expected ${t} but got ${s.version}`);else console.warn("Invalid ifrpc magic")}}addCommandHandler(e,t){if(this.commands.has(e))throw new Error("Command handler already added: "+e);this.commands.set(e,t)}removeCommandHandler(e){this.commands.delete(e)}addEventListener(e,t){this.listeners.has(e)||this.listeners.set(e,[]),
this.listeners.get(e).push(t)}removeEventListener(e,t){const r=this.listeners.get(e).fitler(e=>e!==t);this.listeners.set(e,r)}triggerEventWithFrame(e,t){const r=Array.from(arguments).slice(2);this.sendMessage(e,{op:"event",name:t,args:r})}triggerEvent(e){return this.triggerEventWithFrame.apply(this,[this.peerFrame].concat(Array.from(arguments)))}async invokeCommandWithFrame(e,t){const r=Array.from(arguments).slice(2),n=`${Date.now()}-${s++}`,o=new Promise((e,t)=>{this.activeCommandRequests.set(n,{resolve:e,reject:t})});return this.sendMessage(e,{op:"command",dir:"request",name:t,id:n,args:r}),await o}async invokeCommand(e){return await this.invokeCommandWithFrame.apply(this,[this.peerFrame].concat(Array.from(arguments)))}sendMessage(e,r){const n=Object.assign({magic:this.magic,version:t},r);e.postMessage(n,this.peerOrigin)}sendCommandResponse(e,t,r){this.sendMessage(e.source,{op:"command",dir:"response",name:e.data.name,id:e.data.id,success:t,response:r})}async handleCommandRequest(t){
const r=this.commands.get(t.data.name);if(!r){const r=new ReferenceError("Invalid Command: "+t.data.name);throw this.sendCommandResponse(t,!1,e.RemoteError.serialize(r)),r}try{this.sendCommandResponse(t,!0,await r.apply(t,t.data.args))}catch(r){this.sendCommandResponse(t,!1,e.RemoteError.serialize(r))}}async handleCommandResponse(t){const r=this.activeCommandRequests.get(t.data.id);if(!r)throw new Error("Invalid request ID");this.activeCommandRequests.delete(t.data.id),t.data.success?r.resolve(t.data.response):r.reject(e.RemoteError.deserialize(t.data.response))}async handleEvent(e){const t=this.listeners.get(e.data.name);if(t&&t.length)for(const r of t)try{await r.apply(e,e.data.args)}catch(e){console.error("ifrpc event listener error:",r,e)}else console.debug("ifrpc event triggered without listeners:",e.data.name)}}e.init=((e,t)=>new o(e,t))}(),self.forsta=self.forsta||{},forsta.messenger=forsta.messenger||{},function(){"use strict";const e=forsta.messenger
;forsta.messenger.Client=class t{constructor(t,r,n){if(!(t instanceof Element))throw new TypeError("el argument must be an Element");if(!r)throw new TypeError("auth argument missing");this.auth=r,this.options=n||{},this.onInit=this.options.onInit,this.onLoaded=this.options.onLoaded,this._iframe=document.createElement("iframe"),this._iframe.style.border="none",this._iframe.style.width="100%",this._iframe.style.height="100%";const s=new Set(["camera","microphone","fullscreen","autoplay","display-capture","geolocation","speaker","vibrate"]);if(document.featurePolicy&&document.featurePolicy.allowedFeatures){const e=new Set(document.featurePolicy.allowedFeatures());for(const t of Array.from(s))e.has(t)||s.delete(t)}this._iframe.setAttribute("allow",Array.from(s).join("; ")),s.has("fullscreen")&&this._iframe.setAttribute("allowfullscreen","true"),this._iframe.src=this.options.url||"https://app.forsta.io/@",t.appendChild(this._iframe),this._rpc=ifrpc.init(this._iframe.contentWindow,{
acceptOpener:!0}),this._idbGateway=new e.IDBGateway(this._rpc);const o=this;this._rpc.addEventListener("init",function(e){const t=this;o._onClientInit(t.source,e)}),this.onLoaded&&this._rpc.addEventListener("loaded",()=>this.onLoaded(this))}async _onClientInit(e,t){const r={auth:this.auth};if("main"===t.scope&&(Object.assign(r,{showNav:!!this.options.showNav,showHeader:!!this.options.showHeader,showThreadAside:!!this.options.showThreadAside,showThreadHeader:!!this.options.showThreadHeader,ephemeralUser:this.options.ephemeralUserInfo,openThreadId:this.options.openThreadId}),this._rpcEarlyEvents)){for(const e of this._rpcEarlyEvents)this._rpc.addEventListener(e.event,e.callback);delete this._rpcEarlyEvents}await this._rpc.invokeCommandWithFrame(e,"configure",r),"main"===t.scope&&this.onInit&&await this.onInit(this)}addEventListener(e,t){this._rpc?this._rpc.addEventListener(e,t):(this._rpcEarlyEvents||(this._rpcEarlyEvents=[]),this._rpcEarlyEvents.push({event:e,callback:t}))}
removeEventListener(e,t){this._rpc?this._rpc.removeEventListener(e,t):this._rpcEarlyEvents=this._rpcEarlyEvents.filter(r=>!(r.event===e&&r.callback===t))}async navPanelToggle(e){await this._rpc.invokeCommand("nav-panel-toggle",e)}async threadStartWithExpression(e){return await this._rpc.invokeCommand("thread-join",e)}async threadOpen(e){await this._rpc.invokeCommand("thread-open",e)}async threadSetExpiration(e,t){await this._rpc.invokeCommand("thread-set-expiration",e,t)}async threadList(){return await this._rpc.invokeCommand("thread-list")}async threadListAttributes(e){return await this._rpc.invokeCommand("thread-list-attributes",e)}async threadGetAttribute(e,t){return await this._rpc.invokeCommand("thread-get-attribute",e,t)}async threadSetAttribute(e,t,r){return await this._rpc.invokeCommand("thread-set-attribute",e,t,r)}}}(),function(){"use strict";self.forsta=self.forsta||{},forsta.messenger=forsta.messenger||{};const e={User:{migrations:[{version:1,migrate:function(e){
const t=e.db.createObjectStore("messages");t.createIndex("threadId-received",["threadId","received"]),t.createIndex("threadId-read",["threadId","read"]),t.createIndex("sent","sent"),t.createIndex("expire","expire");const r=e.db.createObjectStore("receipts");r.createIndex("messageId","messageId");const n=e.db.createObjectStore("threads");n.createIndex("type-timestamp",["type","timestamp"]),e.db.createObjectStore("sessions"),e.db.createObjectStore("identityKeys"),e.db.createObjectStore("preKeys"),e.db.createObjectStore("signedPreKeys"),e.db.createObjectStore("state")}},{version:2,migrate:function(e){const t=e.objectStore("threads");t.createIndex("timestamp",["timestamp"])}},{version:3,migrate:function(e){const t=e.db.createObjectStore("cache");t.createIndex("bucket-expiration",["bucket","expiration"])}},{version:4,migrate:function(e){}},{version:5,migrate:function(e){}},{version:6,migrate:function(e){e.db.createObjectStore("contacts")}},{version:7,migrate:function(e){
const t=e.objectStore("messages");t.createIndex("member","members",{multiEntry:!0})}},{version:8,migrate:function(e){const t=e.objectStore("threads");t.createIndex("pendingMember","pendingMembers",{multiEntry:!0})}},{version:9,migrate:function(e){}},{version:10,migrate:function(e){const t=e.objectStore("messages");t.createIndex("ngrams3","ngrams3",{multiEntry:!0})}},{version:11,migrate:function(e){const t=e.db.createObjectStore("protocolReceipts");t.createIndex("sent","sent")}},{version:12,migrate:function(e){}},{version:13,migrate:function(e){}},{version:14,migrate:async function(e){const t=e.objectStore("threads");t.createIndex("archived-timestamp",["archived","timestamp"]),t.deleteIndex("type-timestamp");const r=t.openCursor();await new Promise((e,t)=>{r.onsuccess=(r=>{const n=r.target.result;if(n)try{void 0===n.value.archived&&n.update(Object.assign(n.value,{archived:0})),n.continue()}catch(e){throw t(e),e}else e()}),r.onerror=(e=>{console.error("cursor error event:",e),
t(new Error("cursor error"))})})}},{version:15,migrate:function(e){const t=e.objectStore("messages");t.deleteIndex("ngrams3"),t.createIndex("from-ngrams","_from_ngrams",{multiEntry:!0}),t.createIndex("to-ngrams","_to_ngrams",{multiEntry:!0}),t.createIndex("body-ngrams","_body_ngrams",{multiEntry:!0})}},{version:16,migrate:function(e){e.db.createObjectStore("trustedIdentities")}},{version:17,migrate:function(e){const t=e.db.createObjectStore("quarantinedMessages");t.createIndex("source","source")}},{version:18,migrate:function(e){const t=e.db.createObjectStore("counters");t.createIndex("model-fk-slot",["model","fk","slot"])}},{version:19,migrate:function(e){const t=e.objectStore("counters");t.createIndex("model-fk-slot-key",["model","fk","slot","key"])}},{version:20,migrate:function(e){const t=e.objectStore("messages");t.createIndex("threadId-serverReceived",["threadId","serverReceived"]),t.deleteIndex("threadId-received")}},{version:21,migrate:function(e){
const t=e.objectStore("messages");t.createIndex("messageRef","messageRef")}},{version:22,migrate:async function(e){const t=e.objectStore("messages");t.createIndex("threadId-timestamp",["threadId","timestamp"]),t.deleteIndex("threadId-serverReceived");const r=t.openCursor();await new Promise((e,t)=>{r.onsuccess=(r=>{const n=r.target.result;if(n)try{const e=n.value.serverReceived||n.value.sent,r=Object.assign({},n.value,{timestamp:e});delete r.serverReceived,n.update(r),n.continue()}catch(e){throw t(e),e}else e()}),r.onerror=(e=>{console.error("cursor error event:",e),t(new Error("cursor error"))})})}}]},SharedCache:{migrations:[{version:1,migrate:function(e){const t=e.db.createObjectStore("cache");t.createIndex("bucket-expiration",["bucket","expiration"])}}]}};class t{constructor(t,r,n,s){if(this.schema=e[t],this.id=r,this.version=n,this._rpc=s,!this.schema)throw new Error("No Database Schema")}async init(){console.info(`Opening database ${this.id} (v${this.version})`)
;const e=indexedDB.open(this.id,this.version);await new Promise((t,r)=>{e.onblocked=(e=>{this._rpc.triggerEvent("db-gateway-blocked",this.id)}),e.onsuccess=(e=>{const r=this.db=e.target.result;r.onversionchange=(e=>{console.warn("Database version change requested somewhere: Closing our connection!");try{r.close()}finally{this._rpc.triggerEvent("db-gateway-versionchange",this.id)}}),t()}),e.onerror=(e=>{r(new Error("Could not connect to the database"))}),e.onabort=(e=>{r(new Error("Connection to the database aborted"))}),e.onupgradeneeded=(async t=>{console.warn(`Database upgrade needed: v${t.oldVersion} => v${t.newVersion}`),this.db=t.target.result;try{await this.migrate(e.transaction,t.oldVersion,t.newVersion)}catch(e){r(e)}})}),this._rpc.addCommandHandler(`db-gateway-read-${this.id}`,this.readHandler.bind(this)),this._rpc.addCommandHandler(`db-gateway-update-${this.id}`,this.updateHandler.bind(this)),
this._rpc.addCommandHandler(`db-gateway-query-${this.id}`,this.queryHandler.bind(this)),this._rpc.addCommandHandler(`db-gateway-delete-${this.id}`,this.deleteHandler.bind(this)),this._rpc.addCommandHandler(`db-gateway-clear-${this.id}`,this.clearHandler.bind(this)),this._rpc.addCommandHandler(`db-gateway-create-${this.id}`,this.createHandler.bind(this)),this._rpc.addCommandHandler(`db-gateway-count-${this.id}`,this.countHandler.bind(this)),this._rpc.addCommandHandler(`db-gateway-object-store-names-${this.id}`,this.objectStoreNamesHandler.bind(this))}async migrate(e,t,r){console.info(`DB migrate begin version from v${t} to ${r}`),e.onerror=(e=>{throw new Error("Unhandled migration error:",e)}),e.onabort=(e=>{throw new Error("Unhandled migration abort:",e)});const n=Array.from(this.schema.migrations).filter(e=>e.version>t&&e.version<=r);if(!n||n[n.length-1].version!==r)throw console.error(`Missing migrations for: v${r}; `+`available: ${n.map(e=>e.version)}`),
new Error(`Missing migrations for target version: ${r}`);for(const s of n)console.warn("DB migrating to:",s.version),await s.migrate(e),console.info("DB migrated successfully:",s.version)}async createHandler(e){const t=this.db.transaction([e.storeName],"readwrite"),r=t.objectStore(e.storeName);return e.idFallback&&!r.autoIncrement&&(e.json[e.idAttribute]=e.idFallback),await new Promise((n,s)=>{let o;return t.oncomplete=(e=>n()),t.onerror=(e=>s(e.target.error)),(o=r.keyPath?r.add(e.json):r.add(e.json,e.json[e.idAttribute])).onerror=(e=>s(e.target.error)),t.commit&&t.commit(),e.json})}async updateHandler(e){const t=this.db.transaction([e.storeName],"readwrite"),r=t.objectStore(e.storeName);return await new Promise((n,s)=>{let o;t.oncomplete=(e=>n()),t.onerror=(e=>s(e.target.error)),(o=r.keyPath?r.put(e.json):r.put(e.json,e.json[e.idAttribute])).onerror=(e=>s(e.target.error)),t.commit&&t.commit()})}async readHandler(e){
const t=this.db.transaction([e.storeName],"readonly"),r=t.objectStore(e.storeName);let n;if(e.json[e.idAttribute])n=r.get(e.json[e.idAttribute]);else if(e.index){const t=r.index(e.index.name);n=t.get(e.index.value)}else{let t=0;for(const s of r.indexNames){const o=r.index(s);if("string"==typeof o.keyPath&&1>t)void 0!==e.json[o.keyPath]&&(n=o.get(e.json[o.keyPath]),t=1);else if("object"==typeof o.keyPath&&o.keyPath.length>t){let r=!0;const s=o.keyPath.map(t=>(r=r&&void 0!==e.json[t],e.json[t]));r&&(n=o.get(s),t=o.keyPath.length)}}}if(n)return await new Promise((e,t)=>{n.onsuccess=(t=>e(t.target.result)),n.onerror=(e=>t(e.target.error))})}async deleteHandler(e){const t=this.db.transaction([e.storeName],"readwrite"),r=t.objectStore(e.storeName),n=r.keyPath||e.idAttribute;return await new Promise((s,o)=>{t.oncomplete=(e=>s()),t.onerror=(e=>o(e.target.error)),r.delete(e.json[n]).onerror=(e=>o(e.target.error)),t.commit&&t.commit()})}async clearHandler(e){
const t=this.db.transaction([e.storeName],"readwrite"),r=t.objectStore(e.storeName);return await new Promise((e,n)=>{t.oncomplete=(t=>e()),t.onerror=(e=>n(e.target.error)),r.clear().onerror=(e=>n(e.target.error)),t.commit&&t.commit()})}async queryHandler(e){const t=[];let r=0;const n=this.db.transaction([e.storeName],"readonly"),s=n.objectStore(e.storeName);let o,i,a;if(e.conditions){for(const d of s.indexNames)if(!o)if(a=s.index(d),e.conditions[a.keyPath]instanceof Array){const t=e.conditions[a.keyPath][0]>e.conditions[a.keyPath][1]?e.conditions[a.keyPath][1]:e.conditions[a.keyPath][0],r=e.conditions[a.keyPath][0]>e.conditions[a.keyPath][1]?e.conditions[a.keyPath][0]:e.conditions[a.keyPath][1];i=IDBKeyRange.bound(t,r,!0,!0),o=e.conditions[a.keyPath][0]>e.conditions[a.keyPath][1]?a.openCursor(i,IDBCursor.PREV||"prev"):a.openCursor(i,IDBCursor.NEXT||"next")
}else if("object"==typeof e.conditions[a.keyPath]&&("$gt"in e.conditions[a.keyPath]||"$gte"in e.conditions[a.keyPath]))i="$gt"in e.conditions[a.keyPath]?IDBKeyRange.lowerBound(e.conditions[a.keyPath].$gt,!0):IDBKeyRange.lowerBound(e.conditions[a.keyPath].$gte),o=a.openCursor(i,IDBCursor.NEXT||"next");else if("object"==typeof e.conditions[a.keyPath]&&("$lt"in e.conditions[a.keyPath]||"$lte"in e.conditions[a.keyPath])){let t;t="$lt"in e.conditions[a.keyPath]?IDBKeyRange.upperBound(e.conditions[a.keyPath].$lt,!0):IDBKeyRange.upperBound(e.conditions[a.keyPath].$lte),o=a.openCursor(t,IDBCursor.NEXT||"next")}else void 0!=e.conditions[a.keyPath]&&(i=IDBKeyRange.only(e.conditions[a.keyPath]),o=a.openCursor(i))}else if(e.index){a=s.index(e.index.name);const t=!!e.index.excludeLower,r=!!e.index.excludeUpper
;a&&(e.index.lower&&e.index.upper?i=IDBKeyRange.bound(e.index.lower,e.index.upper,t,r):e.index.lower?i=IDBKeyRange.lowerBound(e.index.lower,t):e.index.upper?i=IDBKeyRange.upperBound(e.index.upper,r):e.index.only&&(i=IDBKeyRange.only(e.index.only)),o="string"==typeof e.index.order&&"desc"===e.index.order.toLowerCase()?a.openCursor(i,IDBCursor.PREV||"prev"):a.openCursor(i,IDBCursor.NEXT||"next"))}else if(e.range){const t=e.range[0]>e.range[1]?e.range[1]:e.range[0],r=e.range[0]>e.range[1]?e.range[0]:e.range[1];i=IDBKeyRange.bound(t,r),o=e.range[0]>e.range[1]?s.openCursor(i,IDBCursor.PREV||"prev"):s.openCursor(i,IDBCursor.NEXT||"next")}else o=e.sort&&e.sort.index?-1===e.sort.order?s.index(e.sort.index).openCursor(null,IDBCursor.PREV||"prev"):s.index(e.sort.index).openCursor(null,IDBCursor.NEXT||"next"):s.openCursor();if(!o)throw new Error("No Cursor");return await new Promise((n,s)=>{o.onerror=(e=>s(e.target.error)),o.onsuccess=(s=>{const o=s.target.result
;o?e.limit&&t.length>=e.limit?i?e.conditions&&e.conditions[a.keyPath]?o.continue(e.conditions[a.keyPath][1]+1):e.index&&(e.index.upper||e.index.lower)&&("string"==typeof e.index.order&&"desc"===e.index.order.toLowerCase()?o.continue(e.index.lower):o.continue(e.index.upper)):o.continue():e.offset&&e.offset>r?(r++,o.continue()):(t.push(o.value),o.continue()):n(t)})})}async countHandler(e){const t=this.db.transaction([e.storeName],"readonly"),r=t.objectStore(e.storeName);return await new Promise((n,s)=>{let o;if(e.index){let t;if(!e.bound)throw new Error("Unsupported keyRange");t=IDBKeyRange.bound(e.bound.lower,e.bound.upper,e.bound.lowerOpen,e.bound.upperOpen);const n=r.index(e.index);o=n.count(t)}else o=r.count();o.onerror=(e=>s(e.target.error)),o.onsuccess=(e=>n(e.target.result)),t.commit&&t.commit()})}objectStoreNamesHandler(){return Array.from(this.db.objectStoreNames)}}forsta.messenger.IDBGateway=class e{constructor(e){this._rpc=e,
this._rpc.addCommandHandler("db-gateway-init",this.onInitHandler.bind(this)),this._initialized=new Map}async onInitHandler(e){if(!this._initialized.has(e.name)){const r=new t(e.name,e.id,e.version,this._rpc);await r.init(),this._initialized.set(e.name,r)}}}}();